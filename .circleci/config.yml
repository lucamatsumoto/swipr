version: 2
jobs:
  build:
    docker:
      # using custom image, see .circleci/images/primary/Dockerfile
      - image: lucamatsumoto/swipr_web:latest
      - image: redis
      - image: postgres:11.1
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: swiprdb

    working_directory: ~/swipr/api/swipr

    steps:

      - run:
          name: Install curl
          command: apk update && apk add curl curl-dev bash
      - run:
          name: Install git
          command: apk add git
      - run:
          name: Install ssh
          command: apk add openssh

      - checkout

      - run:
          name: Waiting for Postgres to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z localhost 5432 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for Postgress && exit 1

      # This should go into custom primary image, here's only for the sake of explanation

      - run:
          name: Install Docker client
          command: |
            set -x
            VER="17.03.0-ce"
            curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
            tar -xz -C /tmp -f /tmp/docker-$VER.tgz
            mv /tmp/docker/* /usr/bin
      # This should go into custom primary image, here's only for the sake of explanation
      - run:
          name: Install Docker Compose
          command: |
            set -x
            curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            mv ~/docker-compose /usr/local/bin/docker-compose
      
      - setup_remote_docker:
          docker_layer_caching: false
      
      - run:
          name: Build service
          command: |
            set -x
            docker-compose build

      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose up -d
            # docker-compose will start 2 containers, the one with service will be named `contacts`
            # we start another container with curl in the same network as `contacts`, this way we have
            # all exposed ports from `contacts` available on `localhost` in this new container
      - deploy:
          name: Build and push Docker image
          command: |
            set -x
            docker build -t lucamatsumoto/swipr_web:latest .
            docker login -u $DOCKER_LOGIN -p $DOCKER_PWD
            docker push lucamatsumoto/swipr_web:latest