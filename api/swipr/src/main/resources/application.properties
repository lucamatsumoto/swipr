## Spring Datasource configurations
# for now, let's use the default postgres user without a password. We can use services like Vault so that we don't have to deal with encryption and stuff
spring.datasource.url=jdbc:postgresql://db:5432/swiprdb
spring.datasource.username=postgres
spring.datasource.password=

# Choose SQL dialect for JDBC driver to recognize
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# good for testing, don't use in production, Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update

# specify connection info
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=5

# need this to fix issue with using hibernate in spring < 2.2
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# OAuth2 Configs
# For Google
spring.security.oauth2.client.registration.google.client-id=716782139066-07ad1a1s1ekeoe7m037q9m8v9d1rifvt.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=ENC(5NL3da0y7+rbAtiPqQnTuB31jwNeUcRzowpPUKjk0B4nAEEtC9o9Tw==)
spring.security.oauth2.client.registration.google.scope=email profile

# For Facebook
spring.security.oauth2.client.registration.facebook.client-id=1178336365706475
spring.security.oauth2.client.registration.facebook.client-secret=ENC(DkqyPx0b9s4KFbVNX/RrqQGAkZSXq7BA47Ww4s0BBXnGTj9HZ8dgy/PmseoP0r/g)
spring.security.oauth2.client.registration.facebook.scope=email public_profile
spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/v3.0/me?fields=id,first_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)

# For temporary key encryption
jasypt.encryptor.password=${JASYPT_ENCRYPT}
jasypt.encryptor.algorithm=PBEWithMD5AndDES